#!/bin/bash

#
# Name: create-rootfs
#
# Description: creates a customized LXC VNX rootfs starting from a basic VNX LXC rootfs
#
# This file is part of VNX package.
#
# Authors: David Fern√°ndez (david@dit.upm.es)
#          Raul Alvarez (raul.alvarez@centeropenmiddleware.com)
# Copyright (C) 2018 DIT-UPM
#           Departamento de Ingenieria de Sistemas Telematicos
#           Universidad Politecnica de Madrid
#           SPAIN
#           
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# An online copy of the licence can be found at http://www.gnu.org/copyleft/gpl.html
#

# 
# Configuration
#


BASEROOTFSNAME=vnx_rootfs_lxc_ubuntu64-16.04-v025-ostack-ocata
ROOTFSNAME=vnx_rootfs_lxc_ubuntu64-16.04-v025-openstack-controller
ROOTFSLINKNAME="rootfs_lxc_ubuntu64-ostack-controller"
# General tools
# 2016-09: removed chrony as it does not work inside a container
PACKAGES="aptsh wget iperf traceroute telnet xterm curl ethtool man-db bash-completion wireshark-gtk xauth crudini python-pip"


CUSTOMIZESCRIPT=$(cat <<EOF

# Remove startup scripts
# update-rc.d -f apache2 remove
# echo manual | sudo tee /etc/init/isc-dhcp-server.override

# Modify failsafe script to avoid delays on startup
sed -i -e 's/.*sleep [\d]*.*/\tsleep 1/' /etc/init/failsafe.conf

# Add ~/bin to root PATH
sed -i -e '\$aPATH=\$PATH:~/bin' /root/.bashrc

# Allow root login by ssh
sed -i -e 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config

# Set locale to en_US. If set to es_ES a python error related to unicode strings arises when 
# calling "openstack service create..." commands
echo "LANG=en_US.UTF-8" > /etc/default/locale

# Disable auto-upgrades if enabled
sed -i -e 's/"1"/"0"/g' /etc/apt/apt.conf.d/20auto-upgrades


export DEBIAN_FRONTEND=noninteractive

# Upgrade pip
pip install --upgrade pip

# STEP 1: Environment
# Openstack basic packages
apt -y install software-properties-common
add-apt-repository -y cloud-archive:ocata
apt update
apt -y dist-upgrade
apt -y install python-openstackclient
apt -y install git

# SQL database
debconf-set-selections <<< 'mariadb-server-5.5 mysql-server/root_password password xxxx'
debconf-set-selections <<< 'mariadb-server-5.5 mysql-server/root_password_again password xxxx'
apt -y install mariadb-server python-mysqldb

# Message queue
apt -y install rabbitmq-server

# Memcached
apt -y install memcached python-memcache

# Mongodb for Telemetry service
#apt-get -y install mongodb-server mongodb-clients python-pymongo
#service mongodb stop
#rm /var/lib/mongodb/journal/prealloc.*
#service mongodb start


# STEP 2: Identity service
apt -y install keystone 
##echo "manual" > /etc/init/keystone.override # Valid for U14.04
#apt-get -y -o Dpkg::Options::="--force-confold" install memcached python-memcache keystone apache2 libapache2-mod-wsgi
# Disable keystone startup in Ubuntu 16.04
#systemctl disable keystone

# STEP 3: Image service (Glance)
apt -y install glance 
#apt-get -y -o Dpkg::Options::="--force-confold" install glance # python-glanceclient

# STEP 4: Compute service (Nova)
apt -y install nova-api nova-conductor nova-consoleauth nova-novncproxy nova-scheduler \
  nova-placement-api
#apt-get -y -o Dpkg::Options::="--force-confold" install nova-api nova-conductor nova-consoleauth nova-novncproxy nova-scheduler # python-novaclient nova-cert

# STEP 5: Network service (Neutron)
apt -y install neutron-server neutron-plugin-ml2 
apt -y -o Dpkg::Options::="--force-confold" install python-neutron-fwaas python-neutron-lbaas python-neutron-lbaas-dashboard
#  neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent \
#  neutron-metadata-agent
#apt-get -y -o Dpkg::Options::="--force-confold" install neutron-server neutron-plugin-ml2 # neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent neutron-metadata-agent #python-neutronclient
##apt-get -y -o Dpkg::Options::="--force-confold" install python-neutron-fwaas python-neutron-lbaas neutron-lbaasv2-agent git

# STEP 6: Dashboard service
apt -y install openstack-dashboard
#apt-get -y -o Dpkg::Options::="--force-confold" install openstack-dashboard

# STEP 8: Heat service
apt -y install heat-api heat-api-cfn heat-engine



EOF
)

function customize_config {

  # Modifications to config and other files in the directory where the rootfs is located
  # config file is located here: ${ROOTFSNAME}/config

cat << EOF >> ${ROOTFSNAME}/config

# Create /dev/net/tun
lxc.cgroup.devices.allow = c 10:200 rwm
lxc.hook.autodev = sh -c "modprobe tun; cd \${LXC_ROOTFS_MOUNT}/dev; mkdir net; mknod net/tun c 10 200; chmod 0666 net/tun"

# Create /dev/kvm
lxc.cgroup.devices.allow = c 10:232 rwm
lxc.hook.autodev = sh -c "cd \${LXC_ROOTFS_MOUNT}/dev; mknod -m 660 kvm c 10 232; chown root:\$(grep kvm \${LXC_ROOTFS_MOUNT}/etc/group | awk -F ':' '{print \$3}') kvm"
EOF
 

}


#
# Do not modify below this line...or do it whit care.
#
function customize_rootfs {

  echo "-----------------------------------------------------------------------"
  echo "Customizing rootfs..."
  echo "--"
  #echo "$CUSTOMIZESCRIPT"
  echo lxc-attach -n $ROOTFSNAME -P $CDIR -- bash -c "$CUSTOMIZESCRIPT" -P $CDIR
  lxc-attach -n $ROOTFSNAME -P $CDIR -- bash -c "$CUSTOMIZESCRIPT" -P $CDIR

}

#
# Do not modify under this line (or do it with care...)
#

function create_new_rootfs {

  #clear

  echo "-----------------------------------------------------------------------"
  echo "Deleting new rootfs directory if already exists..."
  rm -rf ${ROOTFSNAME}

  # Create a tmp dir
  TMPDIR=$( mktemp --tmpdir=. -td tmp-rootfs.XXXXXX )
  echo "TMPDIR=$TMPDIR"
  cd $TMPDIR

  # Download base rootfs
  echo "-----------------------------------------------------------------------"
  echo "Downloading base rootfs..."
  vnx_download_rootfs -r ${BASEROOTFSNAME}.tgz

  mv ${BASEROOTFSNAME} ../${ROOTFSNAME}
  rm -f ${BASEROOTFSNAME}.tgz
  cd .. 
  rmdir $TMPDIR

  echo "--"
  echo "Changing rootfs config file..."
  # Change rootfs config to adapt it to the directory wher is has been downloaded
  sed -i -e '/lxc.rootfs/d' -e '/lxc.mount/d' ${ROOTFSNAME}/config
  echo "
lxc.rootfs = $CDIR/${ROOTFSNAME}/rootfs
lxc.mount = $CDIR/${ROOTFSNAME}/fstab
" >> ${ROOTFSNAME}/config

}

function start_and_install_packages {

  echo "-----------------------------------------------------------------------"
  echo "Installing packages in rootfs..."

  # Install packages in rootfs
  lxc-start --daemon -n $ROOTFSNAME -f ${ROOTFSNAME}/config -P $CDIR
  echo lxc-wait -n $ROOTFSNAME -s RUNNING -P $CDIR
  lxc-wait -n $ROOTFSNAME -s RUNNING -P $CDIR
  sleep 3
  echo lxc-attach -n $ROOTFSNAME -P $CDIR -- dhclient eth0
  lxc-attach -n $ROOTFSNAME -P $CDIR -- dhclient eth0
  echo lxc-attach -n $ROOTFSNAME -P $CDIR -- ifconfig eth0
  lxc-attach -n $ROOTFSNAME -P $CDIR -- ifconfig eth0
  echo lxc-attach -n $ROOTFSNAME -P $CDIR -- ping -c 3 www.dit.upm.es
  lxc-attach -n $ROOTFSNAME -P $CDIR -- ping -c 3 www.dit.upm.es
  lxc-attach -n $ROOTFSNAME -P $CDIR -- apt-get update
  lxc-attach -n $ROOTFSNAME -P $CDIR -- bash -c "DEBIAN_FRONTEND=noninteractive apt-get -y install $PACKAGES"

  # Create /dev/net/tun device
  lxc-attach -n $ROOTFSNAME -P $CDIR -- mkdir /dev/net 
  lxc-attach -n $ROOTFSNAME -P $CDIR -- mknod /dev/net/tun c 10 200 
  lxc-attach -n $ROOTFSNAME -P $CDIR -- chmod 666 /dev/net/tun 

}

function create_rootfs_tgz {
  echo "-----------------------------------------------------------------------"
  echo "Creating rootfs tgz file..."
  rm -f $BASEROOTFSNAME.tgz
  tmpfile=$(mktemp)
  find ${ROOTFSNAME} -type s > $tmpfile 
  #cat $tmpfile
  size=$(du -sb --apparent-size ${ROOTFSNAME} | awk '{ total += $1 - 512; }; END { print total }')
  size=$(( $size * 1020 / 1000 ))
  LANG=C tar --numeric-owner -cpf - ${ROOTFSNAME} -X $tmpfile | pv -p -s $size | gzip > ${ROOTFSNAME}.tgz
  for LINK in $ROOTFSLINKNAME; do
    rm -f $LINK
    ln -s ${ROOTFSNAME} $LINK
  done
}


#
# Main
#
echo "-----------------------------------------------------------------------"
echo "Creating VNX LXC rootfs:"
echo "  Base rootfs:  $BASEROOTFSNAME"
echo "  New rootfs:   $ROOTFSNAME"
echo "  Rootfs link:  $ROOTFSLINKNAME"
echo "  Packages to install: $PACKAGES"
echo "-----------------------------------------------------------------------"

# move to the directory where the script is located
CDIR=`dirname $0`
cd $CDIR
CDIR=$(pwd)

create_new_rootfs
start_and_install_packages 
customize_rootfs
lxc-stop -n $ROOTFSNAME -P $CDIR # Stop the VM
customize_config
create_rootfs_tgz

echo "...done"
echo "-----------------------------------------------------------------------"
